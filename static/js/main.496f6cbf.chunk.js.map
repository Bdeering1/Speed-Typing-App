{"version":3,"sources":["Components/Header/Header.js","Utilities/quote.js","Components/TypingCard/TypingCard.js","Components/Timer/Timer.js","Resources/light blue icon.png","Components/Interface/Interface.js","Tests/reportWebVitals.js","index.js"],"names":["Header","props","Container","fluid","className","style","display","disp","id","RANDOM_QUOTE_API_URL","getNextQuote","a","quote","fetch","then","response","json","data","content","console","log","TypingCard","state","input","quoteChars","loaded","renderNewQuote","bind","handleChange","this","split","map","char","idx","key","val","class","setState","event","target","value","inputChars","newQuoteChars","allCorrect","forEach","charObj","resetTimer","Jumbotron","onChange","placeholder","autoFocus","React","Component","Timer","time","startTimer","startTime","Date","setInterval","currentTime","Math","floor","SpeedTyping","vh","window","innerHeight","showTitle","mainRef","createRef","handleResize","addEventListener","removeEventListener","checkOverflow","current","el","curOverflow","overflow","isOverflowing","clientWidth","scrollWidth","clientHeight","scrollHeight","height","ref","src","blueIcon","alt","width","Col","xs","lg","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.496f6cbf.chunk.js","sourcesContent":["import { Container } from 'reactstrap';\nimport './Header.css'\n\nconst Header = (props) => {\n    return (\n        <header>\n            <Container fluid className=\"bg-light\" style={{display: props.disp ? \"\" : \"none\"}}>\n                <h1 className=\"display-2 text-center\" id=\"title\">Speed Typing</h1>\n                <h2 className=\"text-muted text-center m-0 pb-2\" id=\"sub-title\">By Bryn Deering</h2>\n            </Container>\n        </header>\n    );\n};\n\nexport default Header;","const RANDOM_QUOTE_API_URL = 'https://api.quotable.io/random';\n\nexport default async function getNextQuote() {\n    try {\n        let quote = fetch(RANDOM_QUOTE_API_URL)\n            .then(response => response.json())\n            .then(data => data.content)\n        return quote;\n    } catch (err) {\n        console.log(err);\n        return '';\n    }\n }","import React from 'react';\nimport { Jumbotron } from 'reactstrap';\nimport './TypingCard.css'\n\nimport getNextQuote from '../../Utilities/quote.js';\n\n\nexport default class TypingCard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: '',\n            quoteChars: [],\n            loaded: false\n        };\n        this.renderNewQuote = this.renderNewQuote.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.renderNewQuote();\n    }\n\n    async renderNewQuote() {\n        let quote = await getNextQuote();\n        let quoteChars = quote.split('').map((char, idx) => ({\n            key: idx,\n            val: char,\n            class: 'def'\n        }))\n        this.setState({\n            quoteChars: [...quoteChars],\n            input: '',\n            loaded: true\n        })\n    }\n\n    handleChange(event) {\n        let input = event.target.value;\n        let inputChars = input.split('');\n        let newQuoteChars = [...this.state.quoteChars];\n        let allCorrect = true;\n        newQuoteChars.forEach((char, idx) => {\n            let charObj = {...newQuoteChars[idx]};\n            if (inputChars[idx] == null) {\n                charObj.class = 'def';\n                allCorrect = false;\n            }\n            else if (char.val === inputChars[idx]) {\n                charObj.class = 'correct';\n            }\n            else {\n                charObj.class = 'incorrect';\n                allCorrect = false;\n            }\n            newQuoteChars[idx] = charObj;\n        })\n        this.setState({\n            input,\n            quoteChars: newQuoteChars\n        })\n        if (allCorrect) {\n            this.renderNewQuote();\n            this.resetTimer();\n        }\n    }\n\n    resetTimer() {\n\n    }\n\n    render() {\n        return (\n            <Jumbotron className=\"typing-card w-100 px-4 py-5 m-0\">\n                <div className=\"quote-display px-2 lead text-primary\" id=\"quote-display\">\n                    {this.state.quoteChars.map(charObj => (\n                        <span className={charObj.class} key={charObj.key}>{charObj.val}</span>\n                    ))}\n                </div>\n                <hr/>\n                <textarea\n                    className=\"quote-input w-100 p-2 lead rounded border bg-transparent\"\n                    id=\"quote-input\"\n                    onChange={this.handleChange}\n                    placeholder=\"start typing...\"\n                    value={this.state.input}\n                    autoFocus\n                />\n            </Jumbotron>\n        );\n    }\n};","import React from 'react'\nimport { Container } from 'reactstrap';\nimport './Timer.css'\n\nexport default class Timer extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n          time: 0\n      };\n      this.startTimer = this.startTimer.bind(this);\n    }\n\n    componentDidMount() {\n      this.startTimer();\n    }\n\n    startTimer() {\n      this.setState({\n        time: 0\n      })\n      let startTime = new Date();\n      setInterval(() => {\n        let currentTime = Math.floor((new Date() - startTime) / 1000); //ensure time is accurate\n        this.setState({\n          time: currentTime\n        });\n      }, 1000)\n    }\n\n    render() {\n      return (\n        <Container className=\"timer text-center\" id=\"timer\">\n          {this.state.time}\n        </Container>\n      );\n    }\n  }","export default __webpack_public_path__ + \"static/media/light blue icon.02cb76ce.png\";","import React from 'react';\nimport { Container, Col } from 'reactstrap';\nimport Header from '../Header/Header'\nimport TypingCard from '../TypingCard/TypingCard';\nimport Timer from '../Timer/Timer'\nimport blueIcon from '../../Resources/light blue icon.png'\nimport './Interface.css';\n\nexport default class SpeedTyping extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        vh: window.innerHeight / 100,\n        showTitle: true\n      };\n      this.mainRef = React.createRef();\n      this.handleResize = this.handleResize.bind(this);\n    }\n\n    componentDidMount() {\n      window.addEventListener('resize', this.handleResize);\n      this.handleResize();\n    }\n    componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n    }\n\n    handleResize() {\n      this.setState({\n        vh: window.innerHeight / 100\n      });\n      this.setState({ //showTitle is updated separately main can re-render before checking overflow\n        showTitle: this.checkOverflow(this.mainRef.current) ? false : true\n      });\n    }\n\n    checkOverflow(el) { //https://stackoverflow.com/questions/143815/determine-if-an-html-elements-content-overflows\n      let curOverflow = el.style.overflow;\n      if ( !curOverflow || curOverflow === \"visible\" )\n        el.style.overflow = \"hidden\";\n      let isOverflowing = el.clientWidth < el.scrollWidth || el.clientHeight < el.scrollHeight;\n      el.style.overflow = curOverflow;\n      return isOverflowing;\n    }\n\n    render() {\n      return (\n        <Container fluid\n          className=\"p-0\"\n          style={{\n            height: 100 * this.state.vh\n          }}\n        >\n          <Header disp={this.state.showTitle}/>\n          <main\n            ref={this.mainRef}\n            className=\"mt-md-4\"\n            style={{\n              height: this.state.showTitle ? 100 * this.state.vh - 92 : 100 * this.state.vh\n            }}\n          >\n            <Container className=\"typing-area h-100 p-md-4 d-flex justify-content-center rounded bg-md-light\">\n              <img className=\"position-absolute d-none d-md-block\" src={blueIcon} alt=\"keyboard icon\" style={{width: \"100px\", height: \"100px\"}}/>\n              <Col className=\"banner d-none d-lg-block rounded bg-primary\"></Col>\n              <Col className=\"my-auto p-5\" xs=\"12\" lg=\"9\">\n                <TypingCard />\n                <Timer />\n              </Col>\n              <Col className=\"banner d-none d-lg-block rounded bg-primary\"></Col>\n            </Container>\n          </main>\n        </Container>\n      );\n    }\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Interface from './Components/Interface/Interface'\nimport reportWebVitals from './Tests/reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Interface />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}