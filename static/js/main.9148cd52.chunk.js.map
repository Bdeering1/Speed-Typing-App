{"version":3,"sources":["Components/Header/Header.js","Utilities/quote.js","Components/TypingCard/TypingCard.js","Components/Timer/Timer.js","Resources/light blue icon.png","Components/Interface/Interface.js","Tests/reportWebVitals.js","index.js"],"names":["Header","props","Container","fluid","className","style","display","disp","id","RANDOM_QUOTE_API_URL","getNextQuote","a","quote","fetch","then","response","json","data","content","console","log","TypingCard","state","input","quoteChars","wpm","loaded","renderNewQuote","bind","handleChange","calcWordCount","this","setState","split","map","char","idx","key","val","class","timeElapsed","numSpaces","forEach","charObj","event","target","value","inputChars","newQuoteChars","allCorrect","getTime","Math","round","resetTimer","Jumbotron","onChange","placeholder","autoFocus","React","Component","Timer","time","secInterval","startTime","Date","clearInterval","setInterval","currentTime","floor","SpeedTyping","vh","window","innerHeight","showTitle","mainRef","createRef","timerRef","handleResize","addEventListener","removeEventListener","checkOverflow","current","el","curOverflow","overflow","isOverflowing","clientWidth","scrollWidth","clientHeight","scrollHeight","height","ref","src","blueIcon","alt","width","Col","xs","lg","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9148cd52.chunk.js","sourcesContent":["import { Container } from 'reactstrap';\nimport './Header.css'\n\nconst Header = (props) => {\n    return (\n        <header>\n            <Container fluid className=\"bg-light\" style={{display: props.disp ? \"\" : \"none\"}}>\n                <h1 className=\"display-2 text-center\" id=\"title\">Speed Typing</h1>\n                <h2 className=\"text-muted text-center m-0 pb-2\" id=\"sub-title\">By Bryn Deering</h2>\n            </Container>\n        </header>\n    );\n};\n\nexport default Header;","const RANDOM_QUOTE_API_URL = 'https://api.quotable.io/random';\n\nexport default async function getNextQuote() {\n    try {\n        let quote = fetch(RANDOM_QUOTE_API_URL)\n            .then(response => response.json())\n            .then(data => data.content)\n        return quote;\n    } catch (err) {\n        console.log(err);\n        return '';\n    }\n }","import React from 'react';\nimport { Jumbotron } from 'reactstrap';\nimport './TypingCard.css'\n\nimport getNextQuote from '../../Utilities/quote.js';\n\n\nexport default class TypingCard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: '',\n            quoteChars: [],\n            wpm: 0,\n            loaded: false\n        };\n        this.renderNewQuote = this.renderNewQuote.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.calcWordCount = this.calcWordCount.bind(this);\n    }\n\n    componentDidMount() {\n        this.renderNewQuote();\n    }\n\n    async renderNewQuote() {\n        this.setState({\n            loaded: false\n        })\n        let quote = await getNextQuote();\n        let quoteChars = quote.split('').map((char, idx) => ({\n            key: idx,\n            val: char,\n            class: 'def'\n        }))\n        this.setState({\n            quoteChars: [...quoteChars],\n            input: '',\n            loaded: true\n        })\n    }\n\n    calcWordCount(timeElapsed) {\n        let numSpaces = 0;\n        this.state.quoteChars.forEach(charObj => {\n            if (charObj.val === ' ') numSpaces++;\n        })\n        let timeElapsedMins = timeElapsed / 60;\n        return (numSpaces + 1) / timeElapsedMins;\n    }\n\n    handleChange(event) {\n        let input = event.target.value;\n        let inputChars = input.split('');\n        let newQuoteChars = [...this.state.quoteChars];\n        let allCorrect = true;\n        newQuoteChars.forEach((char, idx) => {\n            let charObj = {...newQuoteChars[idx]};\n            if (inputChars[idx] == null) {\n                charObj.class = 'def';\n                allCorrect = false;\n            }\n            else if (char.val === inputChars[idx]) {\n                charObj.class = 'correct';\n            }\n            else {\n                charObj.class = 'incorrect';\n                allCorrect = false;\n            }\n            newQuoteChars[idx] = charObj;\n        })\n        this.setState({\n            input,\n            quoteChars: newQuoteChars\n        })\n        if (allCorrect && this.state.loaded) {\n            let wpm = this.calcWordCount(this.props.getTime());\n            wpm = Math.round(wpm * 10) / 10;\n            this.setState({\n                wpm\n            })\n            this.props.resetTimer();\n            this.renderNewQuote();\n        }\n    }\n\n    render() {\n        return (\n            <Jumbotron className=\"typing-card w-100 position-relative px-4 py-5 m-0\">\n                <div className=\"quote-display px-2 lead text-primary\" id=\"quote-display\">\n                    {this.state.quoteChars.map(charObj => (\n                        <span className={charObj.class} key={charObj.key}>{charObj.val}</span>\n                    ))}\n                </div>\n                <hr/>\n                <textarea\n                    className=\"quote-input w-100 p-2 lead rounded border bg-transparent\"\n                    id=\"quote-input\"\n                    onChange={this.handleChange}\n                    placeholder=\"start typing...\"\n                    value={this.state.input}\n                    autoFocus\n                />\n                <div className=\"wpm-display position-absolute p-2 lead text-muted\">{this.state.wpm} wpm</div>\n            </Jumbotron>\n        );\n    }\n};","import React from 'react'\nimport { Container } from 'reactstrap';\nimport './Timer.css'\n\nexport default class Timer extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n          time: 0\n      };\n      this.resetTimer = this.resetTimer.bind(this);\n      this.getTime = this.getTime.bind(this);\n      this.secInterval = null;\n    }\n\n    componentDidMount() {\n      this.resetTimer();\n    }\n\n    getTime() {\n      return this.state.time;;\n    }\n\n    resetTimer() {\n      this.setState({\n        time: 0\n      })\n      let startTime = new Date();\n      if (this.secInterval != null)\n        clearInterval(this.secInterval);\n      this.secInterval = setInterval(() => {\n        let currentTime = Math.floor((new Date() - startTime) / 1000); //ensure time is accurate\n        this.setState({\n          time: currentTime\n        });\n      }, 1000);\n    }\n\n    render() {\n      return (\n        <Container id=\"timer\" className=\"timer text-center\">\n          {this.state.time}\n        </Container>\n      );\n    }\n  }","export default __webpack_public_path__ + \"static/media/light blue icon.02cb76ce.png\";","import React from 'react';\nimport { Container, Col } from 'reactstrap';\nimport Header from '../Header/Header'\nimport TypingCard from '../TypingCard/TypingCard';\nimport Timer from '../Timer/Timer'\nimport blueIcon from '../../Resources/light blue icon.png'\nimport './Interface.css';\n\nexport default class SpeedTyping extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        vh: window.innerHeight / 100,\n        showTitle: true\n      };\n      this.mainRef = React.createRef();\n      this.timerRef = React.createRef();\n      this.handleResize = this.handleResize.bind(this);\n      this.getTime = this.getTime.bind(this);\n      this.resetTimer = this.resetTimer.bind(this);\n    }\n\n    componentDidMount() {\n      window.addEventListener('resize', this.handleResize);\n      this.handleResize();\n    }\n    componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n    }\n\n    handleResize() {\n      this.setState({\n        vh: window.innerHeight / 100\n      });\n      this.setState({ //showTitle is updated separately main can re-render before checking overflow\n        showTitle: this.checkOverflow(this.mainRef.current) ? false : true\n      });\n    }\n\n    checkOverflow(el) { //https://stackoverflow.com/questions/143815/determine-if-an-html-elements-content-overflows\n      let curOverflow = el.style.overflow;\n      if ( !curOverflow || curOverflow === \"visible\" )\n        el.style.overflow = \"hidden\";\n      let isOverflowing = el.clientWidth < el.scrollWidth || el.clientHeight < el.scrollHeight;\n      el.style.overflow = curOverflow;\n      return isOverflowing;\n    }\n\n\n    getTime() {\n      return this.timerRef.current.getTime();\n    }\n    resetTimer() {\n      this.timerRef.current.resetTimer();\n    }\n\n    render() {\n      return (\n        <Container fluid\n          className=\"p-0\"\n          style={{\n            height: 100 * this.state.vh\n          }}\n        >\n          <Header disp={this.state.showTitle}/>\n          <main\n            ref={this.mainRef}\n            className=\"mt-md-4\"\n            style={{\n              height: this.state.showTitle ? 100 * this.state.vh - 92 : 100 * this.state.vh\n            }}\n          >\n            <Container className=\"typing-area h-100 p-md-4 d-flex justify-content-center rounded bg-md-light\">\n              <img className=\"position-absolute d-none d-md-block\" src={blueIcon} alt=\"keyboard icon\" style={{width: \"100px\", height: \"100px\"}}/>\n              <Col className=\"banner d-none d-lg-block rounded bg-primary\"></Col>\n              <Col className=\"my-auto p-5\" xs=\"12\" lg=\"9\">\n                <TypingCard getTime={this.getTime} resetTimer={this.resetTimer}/>\n                <Timer ref={this.timerRef}/>\n              </Col>\n              <Col className=\"banner d-none d-lg-block rounded bg-primary\"></Col>\n            </Container>\n          </main>\n        </Container>\n      );\n    }\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Interface from './Components/Interface/Interface'\nimport reportWebVitals from './Tests/reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Interface />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}